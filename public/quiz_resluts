<!DOCTYPE html>
<html>
<head>
  <title>QuizServer Admin</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- QRCode library -->
  <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
  <!-- Add modern animations library -->
  <script src="https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js"></script>
  <style>
    :root {
      --primary-color: #4a6bfd;
      --secondary-color: #6c757d;
      --success-color: #28a745;
      --bg-color: #f8f9fa;
      --text-color: #212529;
      --border-radius: 8px;
      --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
      background-color: var(--bg-color);
      color: var(--text-color);
      padding: 20px;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    h1 {
      color: var(--primary-color);
      text-align: center;
      margin-bottom: 30px;
      font-size: 2.5rem;
      text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    h2 {
      color: var(--secondary-color);
      margin: 25px 0 15px;
      font-size: 1.5rem;
      border-bottom: 2px solid var(--primary-color);
      padding-bottom: 8px;
      display: inline-block;
    }
    
    .card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      padding: 20px;
      margin-bottom: 20px;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    
    .control-panel {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: center;
      margin-bottom: 20px;
    }
    
    select, button {
      padding: 10px 15px;
      border-radius: var(--border-radius);
      border: 1px solid #ddd;
      font-size: 16px;
      transition: all 0.3s ease;
    }
    
    select {
      flex: 1;
      min-width: 200px;
      background-color: white;
      cursor: pointer;
    }
    
    select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(74, 107, 253, 0.25);
    }
    
    button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      cursor: pointer;
      font-weight: 600;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    button:hover {
      background-color: #3a5ae0;
      transform: translateY(-2px);
    }
    
    button:active {
      transform: translateY(0);
    }
    
    button#start-quiz {
      background-color: var(--success-color);
    }
    
    button#start-quiz:hover {
      background-color: #218838;
    }
    
    /* Back button styles */
    button#back-button {
      background-color: var(--secondary-color);
      margin-right: 10px;
    }
    
    button#back-button:hover {
      background-color: #5a6268;
    }
    
    .header-container {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .header-container h1 {
      flex: 1;
      margin-bottom: 0;
    }
    
    #instructions {
      text-align: center;
      padding: 20px;
      background-color: #e9f7fe;
      border-radius: var(--border-radius);
      margin: 25px 0;
      animation: fadeIn 0.5s ease-in-out;
    }
    
    #info-text {
      margin-bottom: 15px;
      font-size: 18px;
      color: var(--primary-color);
      font-weight: 600;
    }
    
    #qrcode {
      margin: 0 auto;
      display: block;
      padding: 10px;
      background: white;
      border-radius: var(--border-radius);
      max-width: 100%;
      height: auto;
    }
    
    #participants-list {
      list-style-type: none;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 15px;
      margin-top: 15px;
    }
    
    #participants-list li {
      background-color: white;
      padding: 10px 15px;
      border-radius: var(--border-radius);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border-left: 4px solid var(--primary-color);
      transition: all 0.2s ease;
    }
    
    #participants-list li:hover {
      transform: translateX(5px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .section {
      margin-bottom: 30px;
    }
    
    .flex-container {
      display: flex;
      align-items: center;
      gap: 15px;
      margin-top: 10px;
    }
    
    .badge {
      display: inline-block;
      padding: 3px 8px;
      border-radius: 12px;
      background-color: var(--primary-color);
      color: white;
      font-size: 12px;
      font-weight: bold;
      margin-left: 8px;
    }
    
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background-color: #dc3545;
      margin-right: 8px;
      transition: background-color 0.3s ease;
    }
    
    .status-indicator.active {
      background-color: var(--success-color);
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    .pulse {
      animation: pulse 2s infinite;
    }
    
    @media (max-width: 768px) {
      .control-panel {
        flex-direction: column;
        align-items: stretch;
      }
      
      #participants-list {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header-container">
      <button id="back-button">‚Üê Back</button>
      <h1>QuizServer Admin</h1>
    </div>
    
    <div class="card section">
      <h2>Server Control</h2>
      <div class="control-panel">
        <label for="ip-select">Select IP to share:</label>
        <select id="ip-select"></select>
        <button id="start-server">
          <span class="status-indicator" id="server-status"></span>
          Start Server
        </button>
      </div>
    </div>

    <div id="instructions" class="card" style="display:none;">
      <h2>Students: Connect Here</h2>
      <p id="info-text"></p>
      <canvas id="qrcode"></canvas>
    </div>

    <div class="card section">
      <h2>Quiz Management</h2>
      <div class="flex-container">
        <select id="quiz-select"></select>
        <button id="start-quiz">Start Quiz</button>
      </div>
    </div>

    <div class="card section">
      <h2>Connected Participants <span id="participant-count" class="badge">0</span></h2>
      <ul id="participants-list"></ul>
    </div>
  </div>

  <script>
    const startBtn = document.getElementById('start-server');
    const infoText = document.getElementById('info-text');
    const instructions = document.getElementById('instructions');
    const participantsList = document.getElementById('participants-list');
    const ipSelect = document.getElementById('ip-select');
    const quizSelect = document.getElementById('quiz-select');
    const startQuizBtn = document.getElementById('start-quiz');
    const serverStatus = document.getElementById('server-status');
    const participantCount = document.getElementById('participant-count');
    const backButton = document.getElementById('back-button');

    let baseURL = '';
    let serverRunning = false;
    let participants = [];

    // Modified back button to redirect to admin_welcome.html
    backButton.onclick = () => {
      window.location.href = 'admin_welcome.html';
    };

    // Ask Electron main process for IPs
    window.electronAPI.getIPs();

    // Populate dropdown when IPs arrive
    window.electronAPI.onAvailableIPs((ips) => {
      ipSelect.innerHTML = ''; // Clear any existing options
      ips.forEach(({ name, address }) => {
        const option = document.createElement('option');
        option.value = address;
        option.textContent = `${address} (${name})`;
        ipSelect.appendChild(option);
      });
      
      // Add animation to highlight dropdown is populated
      anime({
        targets: ipSelect,
        translateY: [10, 0],
        opacity: [0, 1],
        easing: 'easeOutElastic(1, .8)',
        duration: 800
      });
    });

    startBtn.onclick = () => {
      if (serverRunning) {
        // Logic to stop server could be added here if needed
        return;
      }
      
      const selectedIP = ipSelect.value;
      if (!selectedIP) {
        showNotification('Please select an IP address', 'error');
        return;
      }
      
      startBtn.disabled = true;
      startBtn.innerHTML = '<span class="status-indicator"></span> Starting...';
      
      window.electronAPI.startServer(selectedIP);
    };

    window.electronAPI.onServerStarted(({ ip, port }) => {
      serverRunning = true;
      baseURL = `http://${ip}:${port}`;
      
      // Update UI to show server is running
      serverStatus.classList.add('active');
      startBtn.innerHTML = '<span class="status-indicator active"></span> Server Running';
      startBtn.disabled = false;
      
      infoText.innerHTML = `<strong>Students:</strong> Connect to Wi-Fi, then open <br>
                           <a href="${baseURL}" target="_blank">${baseURL}</a>`;
      
      // Show instructions with animation
      instructions.style.display = 'block';
      anime({
        targets: instructions,
        opacity: [0, 1],
        translateY: [-20, 0],
        easing: 'easeOutCubic',
        duration: 800
      });

      // Generate QR code with increased size and styling
      QRCode.toCanvas(document.getElementById('qrcode'), baseURL, {
        width: 200,
        margin: 1,
        color: {
          dark: '#4a6bfd',
          light: '#ffffff'
        }
      }, function (error) {
        if (error) console.error(error);
        else {
          console.log("‚úÖ QR generated!");
          // Add pulse animation to QR code
          document.getElementById('qrcode').classList.add('pulse');
        }
      });
      
      showNotification('Server started successfully!', 'success');
    });

    function fetchParticipants() {
      if (!baseURL) return; // Server not started yet
      
      fetch(`${baseURL}/api/participants`)
        .then(res => res.json())
        .then(data => {
          // Check if participants changed
          const hasChanged = JSON.stringify(data) !== JSON.stringify(participants);
          participants = data;
          
          // Update count badge
          participantCount.textContent = data.length;
          
          if (hasChanged) {
            // Clear and repopulate list
            participantsList.innerHTML = '';
            
            if (data.length === 0) {
              const emptyMsg = document.createElement('p');
              emptyMsg.textContent = 'No participants connected yet';
              emptyMsg.style.fontStyle = 'italic';
              emptyMsg.style.color = '#6c757d';
              participantsList.appendChild(emptyMsg);
            } else {
              data.forEach((participant, index) => {
                const li = document.createElement('li');
                li.textContent = participant.name;
                participantsList.appendChild(li);
                
                // Animate new items
                anime({
                  targets: li,
                  translateX: [20, 0],
                  opacity: [0, 1],
                  easing: 'easeOutCubic',
                  delay: index * 100,
                  duration: 500
                });
              });
            }
          }
        })
        .catch(err => {
          console.error(err);
          // Don't show error notifications for regular polling
        });
    }

    // Poll for participants every 3 seconds
    setInterval(fetchParticipants, 3000);

    // Fetch and populate quiz list
    window.electronAPI.getQuizzes().then(files => {
      quizSelect.innerHTML = '<option value="">Select a quiz</option>';
      
      if (files.length === 0) {
        const option = document.createElement('option');
        option.disabled = true;
        option.textContent = 'No quizzes available';
        quizSelect.appendChild(option);
        startQuizBtn.disabled = true;
      } else {
        files.forEach(f => {
          const opt = document.createElement('option');
          opt.value = f;
          opt.textContent = f;
          quizSelect.appendChild(opt);
        });
        
        // Animate the select dropdown
        anime({
          targets: quizSelect,
          translateY: [10, 0],
          opacity: [0, 1],
          easing: 'easeOutElastic(1, .8)',
          duration: 800,
          delay: 300
        });
      }
    }).catch(err => {
      console.error('Failed to fetch quizzes:', err);
      showNotification('Failed to load quiz list', 'error');
    });

    startQuizBtn.onclick = () => {
      const selected = quizSelect.value;
      if (!selected) {
        showNotification('Please select a quiz first', 'error');
        return;
      }
      
      if (!serverRunning) {
        showNotification('Please start the server first', 'error');
        return;
      }
      
      startQuizBtn.disabled = true;
      startQuizBtn.textContent = 'Starting...';
      
      window.electronAPI.startQuiz(selected);
    };

    window.electronAPI.onQuizStarted((quiz) => {
      startQuizBtn.disabled = false;
      startQuizBtn.textContent = 'Start Quiz';
      
      showNotification(`Quiz "${quiz.name}" started successfully!`, 'success');
    });
    
    // Helper function to show notifications
    function showNotification(message, type = 'info') {
      // Check if notification container exists, if not create it
      let notifContainer = document.getElementById('notification-container');
      
      if (!notifContainer) {
        notifContainer = document.createElement('div');
        notifContainer.id = 'notification-container';
        notifContainer.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 9999;
        `;
        document.body.appendChild(notifContainer);
      }
      
      // Create notification element
      const notification = document.createElement('div');
      notification.style.cssText = `
        padding: 12px 20px;
        margin-bottom: 10px;
        border-radius: 4px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        color: white;
        font-weight: 500;
        min-width: 280px;
        opacity: 0;
        transform: translateX(50px);
        transition: all 0.3s ease;
      `;
      
      // Set colors based on type
      if (type === 'error') {
        notification.style.backgroundColor = '#dc3545';
      } else if (type === 'success') {
        notification.style.backgroundColor = '#28a745';
      } else {
        notification.style.backgroundColor = '#007bff';
      }
      
      notification.textContent = message;
      notifContainer.appendChild(notification);
      
      // Animate in
      setTimeout(() => {
        notification.style.opacity = 1;
        notification.style.transform = 'translateX(0)';
      }, 10);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        notification.style.opacity = 0;
        notification.style.transform = 'translateX(50px)';
        
        // Remove from DOM after animation completes
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 5000);
    }
  </script>
</body>
</html>